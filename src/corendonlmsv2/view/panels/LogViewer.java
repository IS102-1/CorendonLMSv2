package corendonlmsv2.view.panels;

import corendonlmsv2.connectivity.DbManager;
import corendonlmsv2.connectivity.LanguageController;
import corendonlmsv2.main.CorendonLMSv2;
import corendonlmsv2.main.util.StringUtil;
import corendonlmsv2.model.ActionLog;
import corendonlmsv2.model.DatabaseTables;
import corendonlmsv2.model.UserAccount;
import corendonlmsv2.view.NonEditableTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Emile Pels
 */
public class LogViewer extends JPanel implements ActionListener
{

    private final DefaultTableModel model;
    private final JPanel parent;

    /**
     * Creates new form LogViewer
     * 
     * @param parent Parent panel to display when viewer is closed
     */
    public LogViewer(JPanel parent)
    {
        new ActionLog(UserAccount.getCurrent(), "Accessed log viewer").insert();
        
        this.parent = parent;
        initComponents();

        jLabel1.setForeground(CorendonLMSv2.DEFAULT_FORECOLOR);
        setBackground(CorendonLMSv2.DEFAULT_BACKCOLOR);

        model = (DefaultTableModel) logTable.getModel();
        
        loadLogs(null);
        loadUsers();
        
        registerListeners();
        
        backButton.setText(LanguageController.getString("back"));
    }
    
    /**
     * Registers listeners for all appropriate components
     */
    private void registerListeners()
    {
        backButton.addActionListener(this);
        filterComboBox.addActionListener(this);
    }

    /**
     * Loads logs into the table for the specified username
     *
     * @param username Username to load logs for. If null, all logs are
     * displayed
     */
    private void loadLogs(String username)
    {
        ResultSet results;

        if (StringUtil.isStringNullOrWhiteSpace(username))
        {
            results = DbManager.getResultSet(DatabaseTables.LOGS);
        } else
        {
            //Get the column index for USERNAME
            String usernameColumn = DatabaseTables.LOGS.getColumnAt(
                    ActionLog.TableColumns.USERNAME);

            results = DbManager.getResultSet(DatabaseTables.LOGS, username,
                    usernameColumn, true);
        }

        resetLogs();
        
        try
        {
            while (results.next())
            {
                model.addRow(new Object[]
                {
                    results.getString(DatabaseTables.LOGS.getColumnAt(
                    ActionLog.TableColumns.LOG_ID)),
                    results.getString(DatabaseTables.LOGS.getColumnAt(
                    ActionLog.TableColumns.USERNAME)),
                    results.getString(DatabaseTables.LOGS.getColumnAt(
                    ActionLog.TableColumns.USER_ROLE)),
                    results.getString(DatabaseTables.LOGS.getColumnAt(
                    ActionLog.TableColumns.DATE_TIME)),
                    results.getString(DatabaseTables.LOGS.getColumnAt(
                    ActionLog.TableColumns.LOG_MESSAGE))
                });
            }
        } catch (SQLException ex)
        {
            System.err.println("SQL exception: " + ex.getMessage());
        }
    }
    
    /**
     * Adds all usernames to the combobox
     */
    private void loadUsers()
    {
        List<UserAccount> users = UserAccount.getAllUsers();
        DefaultComboBoxModel comboBoxModel = (
                DefaultComboBoxModel) filterComboBox.getModel();
        
        comboBoxModel.addElement(LanguageController.getString("all"));
        
        for (UserAccount user : users)
        {
            comboBoxModel.addElement(user.getUsername());
        }
    }

    /**
     * Removes all rows from the table
     */
    private void resetLogs()
    {
        model.setRowCount(0);
    }
    
    @Override
    public void actionPerformed(ActionEvent ae)
    {
        Object source = ae.getSource();
        
        if (source == backButton)
        {
            CorendonLMSv2.MAIN_FRAME.displayPanel(parent);
        } else if (source == filterComboBox)
        {
            String filterText = (String) filterComboBox.getSelectedItem();
            
            //Load all logs if the selected item is "All". If not, load the
            //logs for the selected username
            loadLogs(filterText.equals(LanguageController.getString("all")) 
                    ? null : filterText);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTable = new javax.swing.JTable();
        filterComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        backButton.setText("Back");

        logTable.setModel(new NonEditableTableModel(DatabaseTables.LOGS.getColumns(), 0));
        jScrollPane1.setViewportView(logTable);

        filterComboBox.setModel(new DefaultComboBoxModel());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Filter:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox filterComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable logTable;
    // End of variables declaration//GEN-END:variables
}
